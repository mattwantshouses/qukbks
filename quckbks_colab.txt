# Quckbks_colab Script
# Version 1.1.0

import os
import re
import pandas as pd
import csv
from google.colab import files
import datetime
import io
import chardet
import openpyxl
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split

# ... (previous functions remain the same)

# 4. Transaction Classification: Enhanced classification system
def train_classifier(transactions_df):
    """
    4.1 Function: train_classifier
    Trains a Naive Bayes classifier for transaction categorization
    """
    X = transactions_df['Description']
    y = transactions_df['Category']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    vectorizer = TfidfVectorizer(stop_words='english')
    X_train_vectorized = vectorizer.fit_transform(X_train)
    
    classifier = MultinomialNB()
    classifier.fit(X_train_vectorized, y_train)
    
    return vectorizer, classifier

def classify_transactions(df, vectorizer, classifier):
    """
    4.2 Function: classify_transactions
    Classifies transactions using the trained classifier
    """
    X = df['Description']
    X_vectorized = vectorizer.transform(X)
    df['Category'] = classifier.predict(X_vectorized)
    return df

# 5. Chart of Accounts: Integration and management
class ChartOfAccounts:
    def __init__(self):
        self.accounts = {
            'Assets': {'Cash': 1000, 'Accounts Receivable': 1100},
            'Liabilities': {'Accounts Payable': 2000},
            'Equity': {'Retained Earnings': 3000},
            'Income': {'Sales': 4000},
            'Expenses': {'Office Supplies': 5000, 'Rent': 5100, 'Utilities': 5200}
        }
    
    def add_account(self, category, name, number):
        if category not in self.accounts:
            self.accounts[category] = {}
        self.accounts[category][name] = number
    
    def get_account_number(self, name):
        for category in self.accounts:
            if name in self.accounts[category]:
                return self.accounts[category][name]
        return None

# 6. Double-Entry Bookkeeping: Implementation
def process_transaction(ledger, date, description, category, account, amount):
    """
    6.1 Function: process_transaction
    Processes a transaction using double-entry bookkeeping
    """
    if amount > 0:  # Income
        ledger = ledger.append({
            'Date': date,
            'Description': description,
            'Account': account,
            'Debit': amount,
            'Credit': 0
        }, ignore_index=True)
        ledger = ledger.append({
            'Date': date,
            'Description': description,
            'Account': category,
            'Debit': 0,
            'Credit': amount
        }, ignore_index=True)
    else:  # Expense
        ledger = ledger.append({
            'Date': date,
            'Description': description,
            'Account': category,
            'Debit': abs(amount),
            'Credit': 0
        }, ignore_index=True)
        ledger = ledger.append({
            'Date': date,
            'Description': description,
            'Account': account,
            'Debit': 0,
            'Credit': abs(amount)
        }, ignore_index=True)
    return ledger

# 7. Inter-Entity Transfers: Handling transfers between entities
def inter_entity_transfer(from_entity, to_entity, amount, description):
    """
    7.1 Function: inter_entity_transfer
    Handles transfers between different entities
    """
    from_entity['ledger'] = process_transaction(
        from_entity['ledger'],
        datetime.date.today(),
        description,
        'Inter-Entity Transfer',
        'Cash',
        -amount
    )
    to_entity['ledger'] = process_transaction(
        to_entity['ledger'],
        datetime.date.today(),
        description,
        'Inter-Entity Transfer',
        'Cash',
        amount
    )

# 8. Financial Reporting: Generate basic financial reports
def generate_profit_and_loss(ledger, start_date, end_date):
    """
    8.1 Function: generate_profit_and_loss
    Generates a basic Profit and Loss statement
    """
    filtered_ledger = ledger[(ledger['Date'] >= start_date) & (ledger['Date'] <= end_date)]
    income = filtered_ledger[filtered_ledger['Account'] == 'Income']['Debit'].sum() - filtered_ledger[filtered_ledger['Account'] == 'Income']['Credit'].sum()
    expenses = filtered_ledger[filtered_ledger['Account'] == 'Expenses']['Debit'].sum() - filtered_ledger[filtered_ledger['Account'] == 'Expenses']['Credit'].sum()
    net_profit = income - expenses
    return pd.DataFrame({
        'Item': ['Income', 'Expenses', 'Net Profit'],
        'Amount': [income, expenses, net_profit]
    })

# 9. Data Export: Functions to export processed data
def export_chart_of_accounts(entity_abbr, coa):
    """
    9.1 Function: export_chart_of_accounts
    Exports the Chart of Accounts to a CSV file
    """
    coa_df = pd.DataFrame([(cat, acct, num) for cat, accounts in coa.accounts.items() for acct, num in accounts.items()],
                          columns=['Category', 'Account', 'Number'])
    coa_df.to_csv(f'{entity_abbr}_chart_of_accounts.csv', index=False)

def export_profit_and_loss(entity_abbr, pl_df):
    """
    9.2 Function: export_profit_and_loss
    Exports the Profit and Loss statement to a CSV file
    """
    pl_df.to_csv(f'{entity_abbr}_profit_and_loss.csv', index=False)

# 10. Main Execution: Enhanced main function with improved error handling
def main():
    """
    10.1 Function: main
    Main execution function for the Financial Data Processor with improved error handling
    """
    print("Enhanced Financial Data Processor v1.1.0")
    selected_files = select_files()
    
    entities = {}
    all_transactions = pd.DataFrame()

    for file in selected_files:
        print(f"\nProcessing file: {file}")
        entity_name, entity_abbr = identify_entity(file)

        if entity_name not in entities:
            entities[entity_name] = {
                'name': entity_name,
                'abbr': entity_abbr,
                'coa': ChartOfAccounts(),
                'ledger': pd.DataFrame(columns=['Date', 'Description', 'Account', 'Debit', 'Credit']),
                'transactions': pd.DataFrame()
            }
        
        df = parse_file(file)
        if df is not None:
            try:
                all_transactions = pd.concat([all_transactions, df], ignore_index=True)
                entities[entity_name]['transactions'] = pd.concat([entities[entity_name]['transactions'], df], ignore_index=True)
                print(f"Successfully processed file. Shape: {df.shape}")
                print(df.head())
            except Exception as e:
                print(f"Error processing data for {file}: {str(e)}")

    # Train the classifier using all transactions
    vectorizer, classifier = train_classifier(all_transactions)

    for entity_name, entity_data in entities.items():
        entity_data['transactions'] = classify_transactions(entity_data['transactions'], vectorizer, classifier)
        
        # Process transactions into the ledger
        for _, row in entity_data['transactions'].iterrows():
            entity_data['ledger'] = process_transaction(
                entity_data['ledger'],
                row['Date'],
                row['Description'],
                row['Category'],
                'Cash',  # Assuming all transactions affect cash for simplicity
                row['Amount']
            )

        # Generate and export Chart of Accounts
        export_chart_of_accounts(entity_data['abbr'], entity_data['coa'])

        # Generate and export Profit and Loss statement
        pl_df = generate_profit_and_loss(entity_data['ledger'], entity_data['transactions']['Date'].min(), entity_data['transactions']['Date'].max())
        export_profit_and_loss(entity_data['abbr'], pl_df)

    # Example of inter-entity transfer (if multiple entities exist)
    if len(entities) > 1:
        entity_names = list(entities.keys())
        inter_entity_transfer(entities[entity_names[0]], entities[entity_names[1]], 1000, "Inter-entity loan")

if __name__ == "__main__":
    main()