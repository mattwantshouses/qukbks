# Quckbks_colab Script
# Version 1.3.0

import os
import re
import pandas as pd
import csv
from google.colab import files
import datetime
import io
import chardet
import openpyxl
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
import json
import xml.etree.ElementTree as ET

# ... (previous functions remain the same)

# 9. Data Export: Enhanced functions to export processed data
def export_to_csv(data, filename):
    """
    9.1 Function: export_to_csv
    Exports data to a CSV file
    """
    data.to_csv(filename, index=False)
    print(f"Data exported to {filename}")

def export_to_qbo(ledger, filename):
    """
    9.2 Function: export_to_qbo
    Exports ledger data to QBO format
    """
    root = ET.Element("QBOXML")
    transactions = ET.SubElement(root, "TRANSACTIONS")
    
    for _, row in ledger.iterrows():
        trans = ET.SubElement(transactions, "TRANSACTION")
        ET.SubElement(trans, "DATE").text = row['Date'].strftime("%Y-%m-%d")
        ET.SubElement(trans, "AMOUNT").text = str(row['Debit'] - row['Credit'])
        ET.SubElement(trans, "MEMO").text = row['Description']
        ET.SubElement(trans, "ACCOUNT").text = row['Account']
    
    tree = ET.ElementTree(root)
    tree.write(filename, encoding="UTF-8", xml_declaration=True)
    print(f"Data exported to {filename}")

def export_to_json(data, filename):
    """
    9.3 Function: export_to_json
    Exports data to a JSON file
    """
    data.to_json(filename, orient='records', date_format='iso')
    print(f"Data exported to {filename}")

def export_chart_of_accounts(entity_abbr, coa):
    """
    9.4 Function: export_chart_of_accounts
    Exports the Chart of Accounts to a CSV file
    """
    coa_df = pd.DataFrame([(cat, acct, num) for cat, accounts in coa.accounts.items() for acct, num in accounts.items()],
                          columns=['Category', 'Account', 'Number'])
    export_to_csv(coa_df, f'{entity_abbr}_chart_of_accounts.csv')

def export_financial_reports(entity_abbr, pl_data, bs_data):
    """
    9.5 Function: export_financial_reports
    Exports the Profit and Loss statement and Balance Sheet to Excel files
    """
    with pd.ExcelWriter(f'{entity_abbr}_financial_reports.xlsx') as writer:
        pl_data['Summary'].to_excel(writer, sheet_name='P&L Summary', index=False)
        pl_data['Income Breakdown'].to_excel(writer, sheet_name='P&L Income Breakdown')
        pl_data['Expense Breakdown'].to_excel(writer, sheet_name='P&L Expense Breakdown')
        
        pd.DataFrame({'Assets': bs_data['Assets']['Balance'],
                      'Liabilities': bs_data['Liabilities']['Balance'],
                      'Equity': bs_data['Equity']['Balance']}).to_excel(writer, sheet_name='Balance Sheet')
    print(f"Financial reports exported to {entity_abbr}_financial_reports.xlsx")

# 10. Data Consistency Checks
def perform_consistency_checks(ledger, transactions):
    """
    10.1 Function: perform_consistency_checks
    Performs various data consistency checks
    """
    checks = {
        "Total debits equal total credits": ledger['Debit'].sum() == ledger['Credit'].sum(),
        "Transaction count matches ledger entries": len(transactions) * 2 == len(ledger),
        "No negative amounts in transactions": (transactions['Amount'] >= 0).all(),
        "All dates are valid": (pd.to_datetime(transactions['Date'], errors='coerce').notnull()).all()
    }
    
    for check, result in checks.items():
        print(f"{check}: {'Passed' if result else 'Failed'}")
    
    return all(checks.values())

# 11. Performance Optimizations
def optimize_dataframes(df):
    """
    11.1 Function: optimize_dataframes
    Optimizes DataFrame memory usage
    """
    for col in df.columns:
        if df[col].dtype == 'object':
            df[col] = pd.Categorical(df[col])
        elif df[col].dtype == 'float64':
            df[col] = pd.to_numeric(df[col], downcast='float')
        elif df[col].dtype == 'int64':
            df[col] = pd.to_numeric(df[col], downcast='integer')
    return df

# 12. Main Execution: Enhanced main function with improved error handling, financial analysis, and export options
def main():
    """
    12.1 Function: main
    Main execution function for the Financial Data Processor with improved error handling, financial analysis, and export options
    """
    print("Enhanced Financial Data Processor v1.3.0")
    selected_files = select_files()
    
    entities = {}
    all_transactions = pd.DataFrame()

    for file in selected_files:
        print(f"\nProcessing file: {file}")
        entity_name, entity_abbr = identify_entity(file)

        if entity_name not in entities:
            entities[entity_name] = {
                'name': entity_name,
                'abbr': entity_abbr,
                'coa': ChartOfAccounts(),
                'ledger': pd.DataFrame(columns=['Date', 'Description', 'Account', 'Debit', 'Credit']),
                'transactions': pd.DataFrame()
            }
        
        df = parse_file(file)
        if df is not None:
            try:
                df = optimize_dataframes(df)  # Optimize DataFrame
                all_transactions = pd.concat([all_transactions, df], ignore_index=True)
                entities[entity_name]['transactions'] = pd.concat([entities[entity_name]['transactions'], df], ignore_index=True)
                print(f"Successfully processed file. Shape: {df.shape}")
                print(df.head())
            except Exception as e:
                print(f"Error processing data for {file}: {str(e)}")

    # Train the classifier using all transactions
    vectorizer, classifier = train_classifier(all_transactions)

    for entity_name, entity_data in entities.items():
        entity_data['transactions'] = classify_transactions(entity_data['transactions'], vectorizer, classifier)
        
        # Add helper columns for analysis
        entity_data['transactions']['Month'] = pd.to_datetime(entity_data['transactions']['Date']).dt.to_period('M')
        entity_data['transactions']['Quarter'] = pd.to_datetime(entity_data['transactions']['Date']).dt.to_period('Q')
        entity_data['transactions']['Year'] = pd.to_datetime(entity_data['transactions']['Date']).dt.year
        
        # Process transactions into the ledger
        for _, row in entity_data['transactions'].iterrows():
            entity_data['ledger'] = process_transaction(
                entity_data['ledger'],
                row['Date'],
                row['Description'],
                row['Category'],
                'Cash',  # Assuming all transactions affect cash for simplicity
                row['Amount']
            )

        # Perform data consistency checks
        if perform_consistency_checks(entity_data['ledger'], entity_data['transactions']):
            print("All consistency checks passed.")
        else:
            print("Warning: Some consistency checks failed. Please review the data.")

        # Generate and export Chart of Accounts
        export_chart_of_accounts(entity_data['abbr'], entity_data['coa'])

        # Generate financial reports
        start_date = entity_data['transactions']['Date'].min()
        end_date = entity_data['transactions']['Date'].max()
        pl_data = generate_profit_and_loss(entity_data['ledger'], start_date, end_date)
        bs_data = generate_balance_sheet(entity_data['ledger'], end_date)

        # Export financial reports
        export_financial_reports(entity_data['abbr'], pl_data, bs_data)

        # Export data in various formats
        export_to_csv(entity_data['transactions'], f"{entity_data['abbr']}_transactions.csv")
        export_to_qbo(entity_data['ledger'], f"{entity_data['abbr']}_ledger.qbo")
        export_to_json(entity_data['transactions'], f"{entity_data['abbr']}_transactions.json")

        # Print summary of financial reports
        print(f"\nFinancial Summary for {entity_name}:")
        print("Profit and Loss Summary:")
        print(pl_data['Summary'])
        print("\nBalance Sheet Summary:")
        print(f"Total Assets: {bs_data['Total Assets']}")
        print(f"Total Liabilities: {bs_data['Total Liabilities']}")
        print(f"Total Equity: {bs_data['Total Equity']}")

    # Example of inter-entity transfer (if multiple entities exist)
    if len(entities) > 1:
        entity_names = list(entities.keys())
        inter_entity_transfer(entities[entity_names[0]], entities[entity_names[1]], 1000, "Inter-entity loan")

if __name__ == "__main__":
    main()